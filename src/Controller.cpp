/*.$file${..\src::Controller.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: growing_champer.qm
* File:  ${..\src::Controller.cpp}
*
* This code has been generated by QM 5.1.3 <www.state-machine.com/qm/>.
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*.$endhead${..\src::Controller.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#include <Arduino.h>
#include "Controller.h"
#include "lcd.h"
#include "rotary.h"

/*.$declare${Hsm::Controller} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${Hsm::Controller} ......................................................*/
typedef struct Controller {
/* protected: */
    QHsm super;

/* private: */
} Controller;
extern Controller Controller_obj;

/* protected: */
static QState Controller_initial(Controller * const me);
static QState Controller_IDLE(Controller * const me);
static QState Controller_SETTING(Controller * const me);
static QState Controller_RUN(Controller * const me);
static QState Controller_TEMP(Controller * const me);
static QState Controller_HUMIDITY(Controller * const me);
static QState Controller_CAUTION(Controller * const me);
static QState Controller_STOP(Controller * const me);
/*.$enddecl${Hsm::Controller} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*. Check for the minimum required QP version */
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpn version 6.9.0 or higher required
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${Hsm::Controller_ctor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${Hsm::Controller_ctor} .................................................*/
void Controller_ctor(void) {
}
/*.$enddef${Hsm::Controller_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${Hsm::super_Controller} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${Hsm::super_Controller} ................................................*/
QHsm *const super_Controller = &Controller_obj.super;
/*.$enddef${Hsm::super_Controller} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${Hsm::Controller} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${Hsm::Controller} ......................................................*/
Controller Controller_obj;
/*.${Hsm::Controller::SM} ..................................................*/
static QState Controller_initial(Controller * const me) {
    /*.${Hsm::Controller::SM::initial} */
    return Q_TRAN(&Controller_IDLE);
}
/*.${Hsm::Controller::SM::IDLE} ............................................*/
static QState Controller_IDLE(Controller * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${Hsm::Controller::SM::IDLE::SETTING} */
        case SETTING_SIG: {
            status_ = Q_TRAN(&Controller_SETTING);
            break;
        }
        /*.${Hsm::Controller::SM::IDLE::START} */
        case START_SIG: {
            status_ = Q_TRAN(&Controller_RUN);
            break;
        }
        /*.${Hsm::Controller::SM::IDLE::CAUTION_SIG} */
        case CAUTION_SIG_SIG: {
            status_ = Q_TRAN(&Controller_CAUTION);
            break;
        }
        /*.${Hsm::Controller::SM::IDLE::TIME_TICK} */
        case TIME_TICK_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.${Hsm::Controller::SM::SETTING} .........................................*/
static QState Controller_SETTING(Controller * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${Hsm::Controller::SM::SETTING::BACK} */
        case BACK_SIG: {
            status_ = Q_TRAN(&Controller_IDLE);
            break;
        }
        /*.${Hsm::Controller::SM::SETTING::CW} */
        case CW_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        /*.${Hsm::Controller::SM::SETTING::CCW} */
        case CCW_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        /*.${Hsm::Controller::SM::SETTING::TEMP_SET} */
        case TEMP_SET_SIG: {
            status_ = Q_TRAN(&Controller_TEMP);
            break;
        }
        /*.${Hsm::Controller::SM::SETTING::HUMI_SET} */
        case HUMI_SET_SIG: {
            status_ = Q_TRAN(&Controller_HUMIDITY);
            break;
        }
        /*.${Hsm::Controller::SM::SETTING::TIMER_BACK} */
        case TIMER_BACK_SIG: {
            status_ = Q_TRAN(&Controller_IDLE);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.${Hsm::Controller::SM::RUN} .............................................*/
static QState Controller_RUN(Controller * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${Hsm::Controller::SM::RUN::TIME_TICK} */
        case TIME_TICK_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        /*.${Hsm::Controller::SM::RUN::CAUTION_SIG} */
        case CAUTION_SIG_SIG: {
            status_ = Q_TRAN(&Controller_CAUTION);
            break;
        }
        /*.${Hsm::Controller::SM::RUN::SETTING} */
        case SETTING_SIG: {
            status_ = Q_TRAN(&Controller_SETTING);
            break;
        }
        /*.${Hsm::Controller::SM::RUN::BACK} */
        case BACK_SIG: {
            status_ = Q_TRAN(&Controller_STOP);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.${Hsm::Controller::SM::TEMP} ............................................*/
static QState Controller_TEMP(Controller * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${Hsm::Controller::SM::TEMP::CW} */
        case CW_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        /*.${Hsm::Controller::SM::TEMP::CCW} */
        case CCW_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        /*.${Hsm::Controller::SM::TEMP::BACK} */
        case BACK_SIG: {
            status_ = Q_TRAN(&Controller_SETTING);
            break;
        }
        /*.${Hsm::Controller::SM::TEMP::SETTING} */
        case SETTING_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.${Hsm::Controller::SM::HUMIDITY} ........................................*/
static QState Controller_HUMIDITY(Controller * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${Hsm::Controller::SM::HUMIDITY::CW} */
        case CW_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        /*.${Hsm::Controller::SM::HUMIDITY::CCW} */
        case CCW_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        /*.${Hsm::Controller::SM::HUMIDITY::BACK} */
        case BACK_SIG: {
            status_ = Q_TRAN(&Controller_SETTING);
            break;
        }
        /*.${Hsm::Controller::SM::HUMIDITY::SETTING} */
        case SETTING_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.${Hsm::Controller::SM::CAUTION} .........................................*/
static QState Controller_CAUTION(Controller * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${Hsm::Controller::SM::CAUTION::BACK} */
        case BACK_SIG: {
            status_ = Q_TRAN(&Controller_IDLE);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.${Hsm::Controller::SM::STOP} ............................................*/
static QState Controller_STOP(Controller * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${Hsm::Controller::SM::STOP::BACK} */
        case BACK_SIG: {
            status_ = Q_TRAN(&Controller_RUN);
            break;
        }
        /*.${Hsm::Controller::SM::STOP::SETTING} */
        case SETTING_SIG: {
            status_ = Q_TRAN(&Controller_SETTING);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.$enddef${Hsm::Controller} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
